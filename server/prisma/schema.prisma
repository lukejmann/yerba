datasource db {
    provider = "sqlite"
    url      = "file:dev.db"
}

generator client {
    provider   = "cargo run -p prisma-cli --bin prisma --"
    output     = "../../crates/prisma/src/prisma.rs"
    space_path = "crate::prisma"
}

model JWT {
    id        Int      @id @default(autoincrement())
    token     String   @unique
    date_used DateTime @default(now())

    user_id Bytes
    user    User  @relation(fields: [user_id], references: [id])

    @@map("user_token")
}

model User {
    id               Bytes     @id
    id_str           String
    account_attached Boolean   @default(false)
    jwts             JWT[]
    Account          Account[]
    Space            Space[]
}

model Account {
    id        Bytes    @id
    id_str    String
    name      String
    email     String
    password  String
    date_used DateTime @default(now())

    user_id Bytes
    user    User  @relation(fields: [user_id], references: [id])

    @@map("account")
}

model Meta {
    id          Bytes   @id
    id_str      String
    name        String
    description String
    color       String?
    Space       Space[]

    @@map("meta")
}

model Space {
    // id     Int   @id @default(autoincrement())
    id     Bytes  @id
    id_str String

    meta_id Bytes @unique
    meta    Meta  @relation(fields: [meta_id], references: [id])

    owner_id Bytes
    owner    User  @relation(fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

    files   File[]
    tasks   Task[]
    Message Message[]

    @@map("space")
}

model Task {
    id     Bytes  @id
    id_str String
    hash   String

    status    Int    @default(0) // 0 = in-progress, 1 = success, 2 = failed
    task_type String

    space_id   Bytes
    Space      Space    @relation(fields: [space_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    file_id    Bytes?
    File       File?    @relation(fields: [file_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    Message    Message? @relation(fields: [message_id], references: [id])
    message_id Bytes?

    date_modified DateTime @default(now())

    @@map("job")
}

model File {
    id     Bytes  @id
    id_str String

    path String

    name      String
    extension String

    supported Boolean @default(true)

    size Int @default(0)

    date_created  DateTime @default(now())
    date_modified DateTime @default(now())
    date_indexed  DateTime @default(now())
    space_id      Bytes
    space         Space    @relation(fields: [space_id], references: [id])
    tasks         Task[]

    @@unique([id, path, name, extension])
    @@map("file")
}

model Message {
    id     Bytes  @id
    id_str String

    text String

    is_user_message Boolean @default(true)

    //response_status only used if not user_message
    response_status Int @default(0) // 0 = n/a, 1 = generating, 2 = success, 3 = failed
    // response_message_id Bytes?
    // response_message    Message? @relation("ResponseMessage", fields: [response_message_id], references: [id])

    // user_message_id Bytes?
    // user_message    Message? @relation("UserMessage", fields: [user_message_id], references: [id])
    response_message_id Bytes?   @unique
    response_message    Message? @relation("ResponseMessage", fields: [response_message_id], references: [id])
    user_message        Message? @relation("ResponseMessage")

    date_created   DateTime @default(now())
    date_finalized DateTime @default(now())
    space_id       Bytes
    space          Space    @relation(fields: [space_id], references: [id])
    tasks          Task[]
    // response_messages Message[] @relation("ResponseMessage")
    // user_messages     Message[] @relation("UserMessage")
    // userId         Bytes?

    @@map("message")
}
